<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap
			PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
			"http://ibatis.apache.org/dtd/sql-map-2.dtd">
<!-- namespace속성: 아래에서 작성한 SQL을 호출할 때 같이 사용된다. -->
<sqlMap namespace = "member">		<!-- ★ MVC를 위한 수정 -->
	<!-- 이 영역에 sql문에 맞는 태그를 사용하여 SQL문을 기술한다.
		
		사용할 수 있는 기본적인 태그들
		<select> ~~~ </select>
		<insert> ~~~ </insert>
		<update> ~~~ </update>
		<delete> ~~~ </delete>
		
		위 태그에서 사용되는 속성들
		1) id 속성			: 해당 태그를 호출할 때 <sqlMap> 태그의 namespace와 연결하여 사용하는 이름
		2) parameterClass	: sql문에 사용될 데이터가 들어있는 객체를 지정한다. (보통 VO클래스, 자바의 자료형 이름 등이 사용됨)
							  (typeAlias로 지정한 alias명을 사용할 수 있다.)
		3) resultClass 속성	: select 문을 실행한 결과를 담을 객체를 지정한다.
							  (보통 VO클래스, 자바의 자료형 이름 등이 사용됨)
	 -->
	 
	 <!-- insert 연습 -->
	 <insert id="insertMember" parameterClass="kr.or.ddit.member.vo.MemberVO"> <!-- iBatis는 ?가 뭔지 모른다. 그러므로 #을 써줌. -->

		INSERT INTO mymember (mem_id, mem_name, mem_tel, mem_addr)
		VALUES (#mem_id#, #mem_name#, #mem_tel#, #mem_addr#)
		<!-- #mem_id# 이런 식으로 써주면 VO 클래스를 파라미터로 지정해줬기 때문에 알아서 getter로 값을 가져온다. -->
	 
	 </insert>
	 
	 
	 <update id="updateMember" parameterClass="memVO">	<!-- memVO 타입으로 파라미터를 줄 테니 알아서 채워넣으라는 뜻 --> 
	 
	 	UPDATE mymember SET mem_name = #mem_name#, mem_tel = #mem_tel#, mem_addr = #mem_addr#
	 	WHERE mem_id = #mem_id#
	 
	 </update>
	 
	 
	 <delete id="deleteMember" parameterClass="String">	<!-- memVO가 아니다. 사기치지 말 것 -->
	 
	 	DELETE FROM mymember
	 	WHERE mem_id = #mem_id#
	 
	 </delete>
	 
	 <!-- 결과값이 여러개인 경우 -->
	 <select id="getMemberAll" resultClass="memVO">	<!-- 어떤 값으로 리턴(반환)해줄지에 대한 구문 -->
	 
	 	SELECT * FROM mymember
	 
	 </select>
	 
	 <!-- 결과값이 1개인 경우 -->
	 <select id="getMember" parameterClass="String" resultClass="int">	<!-- 어떤 값으로 리턴(반환)해줄지에 대한 구문 -->
	 
	 	SELECT COUNT(*) cnt FROM mymember
	 	WHERE mem_id = #mem_id# 
	 
	 </select>
	 
	 <select id="getSearchMember" parameterClass="memVO" resultClass="memVO">
	 
	 	SELECT * FROM mymember
	 	<!-- WHERE 1 = 1 
	 	<isNotEmpty property="mem_id"> 	// property: 게터세터로 들어오는 파라미터값. 들어온 파라미터가 null이 아니면,
	 		AND mem_id = #mem_id#		// null이면 왼쪽의 내용은 무시한다. if 절이랑 같은 개념인데 태그로 써준 것.
	 	</isNotEmpty>
	 	<isNotEmpty property="mem_name">
	 		AND mem_name = #mem_name#
	 	</isNotEmpty>
	 	<isNotEmpty property="mem_tel">
	 		AND mem_tel = #mem_tel#
	 	</isNotEmpty>
	 	<isNotEmpty property="mem_addr">
	 		AND mem_addr LIKE '%' || #mem_addr# || '%' 
	 	</isNotEmpty> -->
	 	
	 	<!-- WHERE 1 = 1을 쓰지 않으려면 사용. 이 방법이 정석. -->
	 	<dynamic prepend="where">
		 	<isNotEmpty property="mem_id" prepend="and">
		 		mem_id = #mem_id#
		 	</isNotEmpty>
		 	<isNotEmpty property="mem_name" prepend="and">
		 		mem_name = #mem_name#
		 	</isNotEmpty>
		 	<isNotEmpty property="mem_tel" prepend="and">
		 		mem_tel = #mem_tel#
		 	</isNotEmpty>
		 	<isNotEmpty property="mem_addr" prepend="and">
		 		mem_addr LIKE '%' || #mem_addr# || '%' 
		 	</isNotEmpty>
	 	</dynamic>
	 
	 </select>

</sqlMap>			





